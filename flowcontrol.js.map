{"version":3,"file":"flowcontrol.js","sources":["src/flow-control.js"],"sourcesContent":["const pino = require(\"pino\");\nconst numeral = require(\"numeral\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-yy-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nclass FlowControl {\n    constructor(maxFlow = 0, name = \"默认流控\") {\n        // 当前正在执行的任务数量\n        this._count = 0;\n\n        // 网络请求每分钟的最大次数\n        this._maxFlow = maxFlow;\n        // 两次任务之间的最小间隔\n        this._minInterval = (60 * 1000) / this._maxFlow;\n\n        // 用于日志显示\n        this._name = name;\n\n        // 上一个任务执行时间\n        this._lastExecuteTime = 0;\n\n        // 等待执行的任务队列\n        this._taskQueue = [];\n\n        // 总的执行时间，毫秒\n        this._totalTime = 0;\n        // 总的执行任务数\n        this._total = 0;\n    }\n\n    /**\n     * 调用器，将异步任务函数和它的参数传入\n     * @param {Function} caller 异步任务函数，它必须是async函数或者返回Promise的函数\n     * @param {Array} args 异步任务函数的参数列表\n     * @returns {Promise<unknown>} 返回一个新的Promise\n     */\n    call(caller, ...args) {\n        // console.log(`【${this._name}】 调用，${typeof (caller)}, ${args}`)\n        return new Promise((resolve, reject) => {\n            const task = this._createTask(caller, args, resolve, reject);\n            // 添加任务后，启动任务检查执行\n            if (this._taskQueue.length <= 0) {\n                setTimeout(() => {\n                    this._executeTask();\n                }, 0);\n            }\n\n            this._taskQueue.push(task);\n        });\n    }\n\n    _checkFlow() {\n        if (this._maxFlow > 0) {\n            // maxFlow设置为每分钟可以访问的次数，则>0表示有设置，0表示不限制\n            let now = Date.now();\n\n            // 简单的采用请求间隔时间来控制流速\n            if (now - this._lastExecuteTime < this._minInterval) {\n                // 如果当前时间到上一次间隔时间小于流控间隔时间，则返回false，这样用于确保每次执行都是均匀发出的\n                return false;\n            }\n            this._lastExecuteTime = now;\n            return true;\n        }\n        return true;\n    }\n\n    _executeTask() {\n        try {\n            // 如果任务队列空，则不再继续检查\n            // logger.debug(`【${this._name}】流控检查 ...`);\n            if (this._taskQueue && this._taskQueue.length > 0) {\n                if (this._checkFlow() === false) {\n                    // console.log(\"count >= max, 当前线程池满，等待空闲\")\n                    // } else if (this._checkFlow() === false) {\n                    // logger.debug(`【${this._name}】 流控未通过, 等待空闲`);\n                } else {\n                    this._lastExecuteTime = Date.now();\n                    let task = this._taskQueue.shift();\n                    // console.log(\"执行任务...\")\n                    task();\n                    let averageTime = 0;\n                    if (this._total > 0) {\n                        averageTime = this._totalTime / this._total / 1000;\n                    }\n                    logger.debug(\n                        `【${this._name}】执行任务，正在运行${\n                            this._count\n                        } 个任务，剩余${\n                            this._taskQueue.length\n                        }个任务，平均执行时间：${numeral(averageTime).format(\n                            \"0.000\"\n                        )}秒`\n                    );\n                }\n            }\n        } catch (error) {\n            logger.error(`【${this._name}】 发生未知异常：%o`, error);\n        }\n\n        if (this._taskQueue && this._taskQueue.length > 0) {\n            setTimeout(() => {\n                this._executeTask();\n            }, 0);\n        }\n    }\n\n    /**\n     * 创建一个任务\n     * @param {Function} caller 实际执行的函数\n     * @param {Array} args 执行函数的参数\n     * @param {Object} resolve 对应任务包装Promise的resolve\n     * @param {Object} reject 对应任务包装Promise的Reject\n     * @returns {Function} 返回一个任务函数\n     * @private\n     */\n    _createTask(caller, args, resolve, reject) {\n        return () => {\n            let beginTime = Date.now();\n            // 实际上是在这里调用了异步任务，并将异步任务的返回（resolve和reject）抛给了上层\n            caller(...args)\n                .then(resolve)\n                .catch(reject)\n                .finally(() => {\n                    this._count--;\n                    let outputArgs = args.map((arg) => {\n                        if (arg && arg.hasOwnProperty(\"token\")) {\n                            //arg.token = null\n                            delete arg.token;\n                        }\n                        return arg;\n                    });\n                    let executeime = Date.now() - beginTime;\n                    this._total++;\n                    this._totalTime += executeime;\n\n                    logger.debug(\n                        `【${this._name}】结束任务，正在运行${\n                            this._count\n                        }个任务，剩余任务${\n                            this._taskQueue.length\n                        }个，本次任务：%o，使用时间 ${numeral(\n                            executeime / 1000\n                        ).format(\"0.000\")}秒`,\n                        outputArgs\n                    );\n                });\n            this._count++;\n        };\n    }\n}\n\nexport default FlowControl;\n// module.exports.FlowControl = FlowControl\n"],"names":["pino","require","numeral","logger","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","constructor","maxFlow","name","_count","_maxFlow","_minInterval","this","_name","_lastExecuteTime","_taskQueue","_totalTime","_total","call","caller","args","Promise","resolve","reject","task","_createTask","length","setTimeout","_executeTask","push","_checkFlow","now","Date","shift","averageTime","debug","format","error","beginTime","then","catch","finally","outputArgs","map","arg","hasOwnProperty","token","executeime"],"mappings":"6MAAA,MAAMA,EAAOC,QAAQ,QACfC,EAAUD,QAAQ,WAElBE,EAASH,EAAK,CAChBI,MAAOC,QAAQC,IAAIC,QAAU,OAC7BC,YAAa,CACTC,YAAY,EACZC,cAAe,4BACfC,MAAM,GAEVC,WAAYX,QAAQ,wBAGxB,MACIY,YAAYC,EAAU,EAAGC,EAAO,aAEvBC,OAAS,OAGTC,SAAWH,OAEXI,aAAgB,IAAaC,KAAKF,cAGlCG,MAAQL,OAGRM,iBAAmB,OAGnBC,WAAa,QAGbC,WAAa,OAEbC,OAAS,EASlBC,KAAKC,KAAWC,UAEL,IAAIC,QAAQ,CAACC,EAASC,WACnBC,EAAOZ,KAAKa,YAAYN,EAAQC,EAAME,EAASC,GAEjDX,KAAKG,WAAWW,QAAU,GAC1BC,WAAW,UACFC,gBACN,QAGFb,WAAWc,KAAKL,KAI7BM,gBACQlB,KAAKF,SAAW,EAAG,KAEfqB,EAAMC,KAAKD,cAGXA,EAAMnB,KAAKE,iBAAmBF,KAAKD,qBAIlCG,iBAAmBiB,GACjB,UAEJ,EAGXH,sBAIYhB,KAAKG,YAAcH,KAAKG,WAAWW,OAAS,MAClB,IAAtBd,KAAKkB,kBAIF,MACEhB,iBAAmBkB,KAAKD,MAClBnB,KAAKG,WAAWkB,OAE3BT,OACIU,EAAc,EACdtB,KAAKK,OAAS,IACdiB,EAActB,KAAKI,WAAaJ,KAAKK,OAAS,KAElDrB,EAAOuC,MACF,IAAGvB,KAAKC,kBACLD,KAAKH,gBAELG,KAAKG,WAAWW,oBACN/B,EAAQuC,GAAaE,OAC/B,cAKlB,MAAOC,GACLzC,EAAOyC,MAAO,IAAGzB,KAAKC,mBAAoBwB,GAG1CzB,KAAKG,YAAcH,KAAKG,WAAWW,OAAS,GAC5CC,WAAW,UACFC,gBACN,GAaXH,YAAYN,EAAQC,EAAME,EAASC,SACxB,SACCe,EAAYN,KAAKD,MAErBZ,KAAUC,GACLmB,KAAKjB,GACLkB,MAAMjB,GACNkB,QAAQ,UACAhC,aACDiC,EAAatB,EAAKuB,IAAKC,IACnBA,GAAOA,EAAIC,eAAe,iBAEnBD,EAAIE,MAERF,IAEPG,EAAaf,KAAKD,MAAQO,OACzBrB,cACAD,YAAc+B,EAEnBnD,EAAOuC,MACF,IAAGvB,KAAKC,kBACLD,KAAKH,iBAELG,KAAKG,WAAWW,wBACF/B,EACdoD,EAAa,KACfX,OAAO,YACTM,UAGPjC"}