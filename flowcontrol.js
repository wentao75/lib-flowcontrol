!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self)["@wt/lib-flowcontrol"]=e()}(this,(function(){"use strict";const t=require("pino"),e=require("numeral"),s=t({level:process.env.LOGGER||"info",prettyPrint:{levelFirst:!0,translateTime:"SYS:yyyy-mm-dd HH:MM:ss.l",crlf:!0},prettifier:require("pino-pretty")});return class{constructor(t=0,e="默认流控"){this._count=0,this._maxFlow=t,this._minInterval=6e4/this._maxFlow,this._name=e,this._lastExecuteTime=0,this._taskQueue=[],this._totalTime=0,this._total=0}call(t,...e){return new Promise((s,i)=>{const n=this._createTask(t,e,s,i);this._taskQueue.length<=0&&setTimeout(()=>{this._executeTask()},0),this._taskQueue.push(n)})}_checkFlow(){if(this._maxFlow>0){let t=Date.now();return!(t-this._lastExecuteTime<=this._minInterval)&&(this._lastExecuteTime=t,!0)}return!0}_executeTask(){try{if(this._taskQueue&&this._taskQueue.length>0)if(!1===this._checkFlow());else{this._lastExecuteTime=Date.now(),this._taskQueue.shift()();let t=0;this._total>0&&(t=this._totalTime/this._total/1e3),s.debug(`【${this._name}】执行任务，正在运行${this._count} 个任务，剩余${this._taskQueue.length}个任务，平均执行时间：${e(t).format("0.000")}秒`)}}catch(t){s.error(`【${this._name}】 发生未知异常：%o`,t)}this._taskQueue&&this._taskQueue.length>0&&setTimeout(()=>{this._executeTask()},0)}_createTask(t,i,n,a){return()=>{let o=Date.now();t(...i).then(n).catch(a).finally(()=>{this._count--;let t=i.map(t=>(t&&t.hasOwnProperty("token")&&delete t.token,t)),n=Date.now()-o;this._total++,this._totalTime+=n,s.debug(`【${this._name}】结束任务，正在运行${this._count}个任务，剩余任务${this._taskQueue.length}个，本次任务：%o，使用时间 ${e(n/1e3).format("0.000")}秒`,t)}),this._count++}}}}));
//# sourceMappingURL=flowcontrol.js.map
